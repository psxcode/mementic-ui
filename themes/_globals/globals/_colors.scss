// Colors
// -------------------------------
@function color-bg($color) {
  @return lighten($color, 40%);
}

@function color-light($color) {
  @return lighten($color, 20%);
}

@function color-hover($color) {
  @return saturate(darken($color, 5%), 10%);
}

@function color-focus($color) {
  @return saturate(darken($color, 8%), 20%);
}

@function color-down($color) {
  @return saturate(darken($color, 5%), 15%);
}

@function color-active($color) {
  @return saturate(darken($color, 5%), 15%);
}

@function color-shadow($color) {
  @return darken($color, 10%);
}

@function color-disabled($color) {
  @return rgba($color, 0.5);
}

@function color-transparent($color) {
  @return rgba($color, 0.1);
}

@function color-transparent-strong($color) {
  @return rgba($color, 0.1);
}

@function color-transparent-subtle($color) {
  @return rgba($color, 0.05);
}

// sRGB BT-709 BRIGHTNESS
@function brightness($c) {
  $rlin: log2lin(red($c)/255);
  $glin: log2lin(green($c)/255);
  $blin: log2lin(blue($c)/255);
  @return lin2log(0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin) * 100;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: darken($color, 75%), $light: lighten($color, 75%)) {
  @if $color == null {
	@return null;
  }

  $color-brightness: brightness($color);
  $light-brightness: brightness($light);
  $dark-brightness: brightness($dark);

  @return if(abs($color-brightness - $light-brightness) > abs($color-brightness - $dark-brightness), $light, $dark);
}

// Main colors
// -------------------------------
$colors-info: (
		'positive': #2185D0,
		'negative': #ef473a,
		'success': #2185D0,
		'fail': #ef473a,
		'info': #63c5d8,
		'warning': #ffa35c,
		'error': #ef473a
) !default;

@function color-info($name) {
  $name: to-string($name);

  @if not(map-has-key($colors-info, $name)) {
	@error 'color-info: invalid $name \'#{$name}\'';
  }

  @return map-get($colors-info, $name);
}

$auto-include-colors-info: true !default;

// Colors greyscale
// -------------------------------
$color-darker: #202224;
$color-dark: #505761;
$color-mid: #888;
$color-light: #d3d6db;
$color-lighter: #f5f7fa;

// Divider Colors
// -------------------------------
$_color-divider: #202020 !default;
$_color-divider-inverted: #FFF !default;

$_color-divider-blend: 0.15 !default;
$_color-divider-blend-inverted: 0.3 !default;

$color-divider-state-names: (
		'default',
		'strong',
		'solid',
		'internal',
		'solid-internal',
		'selected',
		'solid-selected',
		'strong-selected',
		'disabled'
) !default;

$_colors-divider-states-blend-mult: map-zip($color-divider-state-names, (
		1.0, //default
		2.0, //strong
		5.0, //solid
		0.65, //internal
		4.0, //solid-intenal
		2.5, //selected
		4.0, //solid-selected
		3.5, //strong-selected
		3.5 //disabled
)) !default;

@function _colorize-divider-state($color, $state) {
  $blend: alpha($color);
  $mult: map-get($_colors-divider-states-blend-mult, $state);

  @return rgba($color, clamp($blend * $mult));
}

@function _color-divider-state($state, $inverted: false) {
  $inverted: to-bool($inverted);
  $color: rgba(if($inverted, $_color-divider-inverted, $_color-divider), if($inverted, $_color-divider-blend-inverted, $_color-divider-blend));

  @return _colorize-divider-state($color, $state);
}

@function colorize-divider($color) {
  @return _colorize-divider-state($color, 'default');
}

@function color-divider($inverted: false) {
  @return _color-divider-state('default', $inverted);
}

@function colorize-divider-strong($color) {
  @return _colorize-divider-state($color, 'strong');
}

@function color-divider-strong($inverted: false) {
  @return _color-divider-state('strong', $inverted);
}

@function colorize-divider-solid($color) {
  @return _colorize-divider-state($color, 'solid');
}

@function color-divider-solid($inverted: false) {
  @return _color-divider-state('solid', $inverted);
}

@function colorize-divider-internal($color) {
  @return _colorize-divider-state($color, 'internal');
}

@function color-divider-internal($inverted: false) {
  @return _color-divider-state('internal', $inverted);
}

@function colorize-divider-solid-internal($color) {
  @return _colorize-divider-state($color, 'solid-internal');
}

@function color-divider-solid-internal($inverted: false) {
  @return _color-divider-state('solid-internal', $inverted);
}

@function colorize-divider-selected($color) {
  @return _colorize-divider-state($color, 'selected');
}

@function color-divider-selected($inverted: false) {
  @return _color-divider-state('selected', $inverted);
}

@function colorize-divider-solid-selected($color) {
  @return _colorize-divider-state($color, 'solid-selected');
}

@function color-divider-solid-selected($inverted: false) {
  @return _color-divider-state('solid-selected', $inverted);
}

@function colorize-divider-strong-selected($color) {
  @return _colorize-divider-state($color, 'strong-selected');
}

@function color-divider-strong-selected($inverted: false) {
  @return _color-divider-state('strong-selected', $inverted);
}

@function colorize-divider-disabled($color) {
  @return _colorize-divider-state($color, 'disabled');
}

@function color-divider-disabled($inverted: false) {
  @return _color-divider-state('disabled', $inverted);
}

// Text Colors
// -------------------------------
$_color-text: #000 !default;
$_color-text-inverted: #fff !default;

$_color-text-blend: 0.6 !default;
$_color-text-blend-inverted: 1.0 !default;

$color-text-state-names: (
		'default',
		'muted',
		'selected',
		'unselected',
		'hovered',
		'pressed',
		'disabled'
) !default;

$_colors-text-states-blend-mult: map-zip($color-text-state-names, (
		1.0, //default
		0.7, //muted
		1.12, //selected
		0.5, //unselected
		0.9, //hovered
		1.05, //pressed
		0.5 //disabled
)) !default;

@function _colorize-text-state($color, $state) {
  $blend: alpha($color);
  $mult: map-get($_colors-text-states-blend-mult, $state);

  @return rgba($color, clamp($blend * $mult));
}

@function _color-text-state($state, $inverted: false) {
  $inverted: to-bool($inverted);
  $color: rgba(if($inverted, $_color-text-inverted, $_color-text), if($inverted, $_color-text_blend-inverted, $_color-text_blend));

  @return _colorize-text-state($color, $state);
}

@function colorize-text($color) {
  @return _colorize-text-state($color, 'default');
}

@function color-text($inverted: false) {
  @return _color-text-state('default', $inverted);
}

@function colorize-text-muted($color) {
  @return _colorize-text-state($color, 'muted');
}

@function color-text-muted($inverted: false) {
  @return _color-text-state('muted', $inverted);
}

@function colorize-text-selected($color) {
  @return _colorize-text-state($color, 'selected');
}

@function color-text-selected($inverted: false) {
  @return _color-text-state('selected', $inverted);
}

@function colorize-text-unselected($color) {
  @return _colorize-text-state($color, 'unselected');
}

@function color-text-unselected($inverted: false) {
  @return _color-text-state('unselected', $inverted);
}

@function colorize-text-hovered($color) {
  @return _colorize-text-state($color, 'hovered');
}

@function color-text-hovered($inverted: false) {
  @return _color-text-state('hovered', $inverted);
}

@function colorize-text-pressed($color) {
  @return _colorize-text-state($color, 'pressed');
}

@function color-text-pressed($inverted: false) {
  @return _color-text-state('pressed', $inverted);
}

@function colorize-text-disabled($color) {
  @return _colorize-text-state($color, 'disabled');
}

@function color-text-disabled($inverted: false) {
  @return _color-text-state('disabled', $inverted);
}

@function colorize-text-heading($color) {
  @return _colorize-text-state(darken($color, 5%), 'default');
}

@function color-text-heading($inverted: false) {
  $inverted: to-bool($inverted);
  $color: darken(rgba(if($inverted, $_color-text-inverted, $_color-text), if($inverted, $_color-text_blend-inverted, $_color-text_blend)), 5%);

  @return _colorize-text-state($color, 'default');
}