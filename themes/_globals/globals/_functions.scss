/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
	$map: map-get($map, $key);
  }

  @return $map;
}

/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function map-deep-set($map, $keys.../*, $value */
) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
	@return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
	$map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
	$result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

/// Test if map got all `$keys` at first level
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-keys($map, $keys...) {
  @each $key in $keys {
	@if not map-has-key($map, $key) {
	  @return false;
	}
  }

  @return true;
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-nested-key($map, $keys...) {
  @each $key in $keys {
	@if not map-has-key($map, $key) {
	  @return false;
	}
	$map: map-get($map, $key);
  }

  @return true;
}

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
	@warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
        + "Resulting map will only have #{$min} pairs.";
  }

  @if $min == 0 {
	@return $map;
  }

  @for $i from 1 through $min {
	$map: map-merge($map, (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}

/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function map-extend($map, $maps.../*, $deep */
) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
	// Store current map
	$current: nth($maps, $i);

	// If not in deep mode, simply merge current map with map
	@if not $deep {
	  $map: map-merge($map, $current);
	} @else {
	  // If in deep mode, loop through all tuples in current map
	  @each $key, $value in $current {

		// If value is a nested map and same key from map is a nested map as well
		@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
		  // Recursive extend
		  $value: map-extend(map-get($map, $key), $value, true);
		}

		// Merge current tuple with map
		$map: map-merge($map, ($key: $value));
	  }
	}
  }

  @return $map;
}

@function map-get-by-index($map, $index) {
  $keys: map-keys($map);
  $values: map-values($map);

  @if $index > length($keys) {
	@error 'map-get-by-index: invalid $index #{$index} of length #{length($keys)}'
  }

  @return (nth($keys, $index), nth($values, $index));
}

@function map-length($map) {
  @if type-of($map) != 'map' {
	@error 'map-length: $map is invalid #{$map}';
  }

  @return length(map-keys($map));
}

@function map-key-by-index($map, $index) {
  @return nth(map-get-by-index($map, $index), 1);
}

@function map-value-by-index($map, $index) {
  @return nth(map-get-by-index($map, $index), 2);
}

@function map-key-index($map, $key) {
  $keys: map-keys($map);
  @for $i from 1 through length($keys) {
	@if nth($keys, $i) == $key {
	  @return $i;
	}
  }
}

@function map-extract($map, $keys) {
  $result: ();

  @for $i from 1 through length($keys) {
	$key: nth($keys, $i);
	@if map-has-key($map, $key) {
	  $result: map-merge($result, ($key: map-get($map, $key)));
	}
  }

  @return $result;
}

@function map-extract-by-indexes($map, $indexes) {
  $keys: map-keys($map);
  $values: map-values($map);
  $result: ();

  @for $i from 1 through length($indexes) {
	$index: nth($indexes, $i);
	@if $index <= length($keys) {
	  $result: map-merge($result, (nth($keys, $index): nth($values, $index)));
	}
  }

  @return $result;
}

// Utility functions
// -------------------------------

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function clamp($value, $min: 0, $max: 1) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}

@function to-string($value) {
  @return "#{$value}";
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
	@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function number-name($number) {
  $numbers: ('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen') !default;
  @return nth($numbers, $number);
}

@function decimal-round ($number, $digits: 0, $mode: round) {

  // $number must be a number
  @if type-of($number) != number {
	@error '#{$number} is not a number.';
  }

  // $digits must be a unitless number
  @if type-of($digits) != number {
	@error '#{$digits} is not a number.';
  } @else if not unitless($digits) {
	@error '#{$digits} has a unit.';
  }

  $n: 1;
  @for $i from 1 through $digits {
	$n: $n * 10;
  }

  @if $mode == round {
	@return round($number * $n) / $n;
  } @else if $mode == ceil {
	@return ceil($number * $n) / $n;
  } @else if $mode == floor {
	@return floor($number * $n) / $n;
  } @else {
	@error '#{$mode} is undefined keyword.';
  }
}